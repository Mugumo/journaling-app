// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  name              String?
  firstName         String?
  lastName          String?
  email             String         @unique
  emailVerified     DateTime?
  image             String?
  nickname          String?        @unique
  avatarUrl         String?
  bio               String?
  provider          String? // OAuth provider name (e.g., "google")
  providerAccountId String?        @unique // Unique identifier from provider
  journals          JournalEntry[]
  labels            Label[]
  categories        Category[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model JournalEntry {
  id         String         @id @default(uuid())
  title      String
  body       String
  category   Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId String?
  author     User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  images     JournalImage[]
  labels     Label[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model JournalImage {
  id        Int          @id @default(autoincrement())
  journal   JournalEntry @relation(fields: [journalId], references: [id])
  journalId String
  fileUrl   String
}

model Category {
  id          String         @id @default(uuid())
  name        String
  description String?
  journals    JournalEntry[]
  creator     User?           @relation(fields: [creatorID], references: [id], onDelete: Cascade)
  creatorID   String?
}

model Label {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  creator     User           @relation(fields: [creatorID], references: [id], onDelete: Cascade)
  creatorID   String
  journals    JournalEntry[]
}
